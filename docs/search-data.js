window.Aiken.initSearch([{"doc":"test_collections","title":"test_collections","content":" ```\n ┍━ test_collections ━━━━━━━━━━━━━━━━━━━━━━━━\n │ PASS [mem:  30377, cpu: 10666506] list_and\n │ PASS [mem:  29117, cpu:  9912212] list_or\n │ PASS [mem:  95047, cpu: 38067735] zip3\n │ PASS [mem: 145231, cpu: 54009708] unzip3\n ┕━━━━━━━━━━━━━ 4 tests | 4 passed | 0 failed\n ```","url":"test_collections.html"},{"doc":"auxlib/logics","title":"all_false","content":"all_false(bool_list: List&lt;Bool&gt;) -&gt; Bool\n The opposite of `all_true`","url":"auxlib/logics.html#all_false"},{"doc":"auxlib/logics","title":"all_true","content":"all_true(bool_list: List&lt;Bool&gt;) -&gt; Bool\n Equivalent to the old `list.and`","url":"auxlib/logics.html#all_true"},{"doc":"auxlib/logics","title":"any_false","content":"any_false(bool_list: List&lt;Bool&gt;) -&gt; Bool\n The opposite of `any_true`","url":"auxlib/logics.html#any_false"},{"doc":"auxlib/logics","title":"any_true","content":"any_true(bool_list: List&lt;Bool&gt;) -&gt; Bool\n Equivalent to the old `list.or`","url":"auxlib/logics.html#any_true"},{"doc":"auxlib/logics","title":"auxlib/logics","content":"","url":"auxlib/logics.html"},{"doc":"test_logics","title":"test_logics","content":" ```\n ┍━ test_logics ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n │ PASS [mem:  30377, cpu: 10666506] all_true\n │ PASS [mem:  29117, cpu:  9912212] any_true\n │ PASS [mem:  33382, cpu: 11759286] all_false\n │ PASS [mem:  31521, cpu: 10786436] any_false\n ┕━━━━━━━━━━━━━━ 4 tests | 4 passed | 0 failed\n ```","url":"test_logics.html"},{"doc":"auxlib/collections","title":"list_and","content":"list_and(bool_list: List&lt;Bool&gt;) -&gt; Bool\n Tells whether all of the `booleans` are `true`","url":"auxlib/collections.html#list_and"},{"doc":"auxlib/collections","title":"list_or","content":"list_or(bool_list: List&lt;Bool&gt;) -&gt; Bool\n Tells whether any of the `booleans` is `true`","url":"auxlib/collections.html#list_or"},{"doc":"auxlib/collections","title":"unzip3","content":"unzip3(abc: List&lt;(a, b, c)&gt;) -&gt; (List&lt;a&gt;, List&lt;b&gt;, List&lt;c&gt;)\n Decompose a list of 3-tuple into a tuple of 3 lists","url":"auxlib/collections.html#unzip3"},{"doc":"auxlib/collections","title":"zip3","content":"zip3(az: List&lt;a&gt;, bz: List&lt;b&gt;, cz: List&lt;c&gt;) -&gt; List&lt;(a, b, c)&gt;\n Combine 3 lists together into a list of 3-tuple","url":"auxlib/collections.html#zip3"},{"doc":"auxlib/collections","title":"auxlib/collections","content":"","url":"auxlib/collections.html"}]);